# Workflow for building and releasing Android APKs based on a pushed tag

name: Deploy Android app

env:
  APP_NAME: TODO APP NAME HERE
  APP_MODULE: TODO NAME OF MODULE HERE
  NOTIFICATION_FOOTER: Stay calm and drink gin.
  SDK_DEV_KEYSTORE: ${{ secrets.SDK_DEV_KEYSTORE }}
  SDK_DEV_KEYSTORE_PASSWORD: ${{ secrets.SDK_DEV_KEYSTORE_PASSWORD }}

on:
  push:
    tags:
      # <major.minor.patch>, example: 1.0.0
      - '[0-9]+.[0-9]+.[0-9]+'
      # <major.minor.patch-<tag>.<number>>, example: 1.0.0-RC.1, 1.0.0-alpha.2, 1.0.0-beta.14
      - '[0-9]+.[0-9]+.[0-9]+-*.[0-9]+'

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Extract tag from ref
        # ref is refs/tag/<tag> - split by / and retrieve the 3rd element
        run: echo "TAG=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_ENV

      - name: Extract semver details from final release tag
        if: contains(env.TAG, '-') != true
        run: |
          echo "VERSION_MAJOR=$(echo $TAG | cut -d . -f 1)" >> $GITHUB_ENV
          echo "VERSION_MINOR=$(echo $TAG | cut -d . -f 2)" >> $GITHUB_ENV
          echo "VERSION_PATCH=$(echo $TAG | cut -d . -f 3)" >> $GITHUB_ENV
          echo "PRE_RELEASE=false" >> $GITHUB_ENV

      - name: Extract semver details from pre-release tag
        if: contains(env.TAG, '-')
        run: |
          echo "VERSION_MAJOR=$(echo $TAG | cut -d - -f 1 | cut -d . -f 1)" >> $GITHUB_ENV
          echo "VERSION_MINOR=$(echo $TAG | cut -d - -f 1 | cut -d . -f 2)" >> $GITHUB_ENV
          echo "VERSION_PATCH=$(echo $TAG | cut -d - -f 1 | cut -d . -f 3)" >> $GITHUB_ENV
          echo "VERSION_SUFFIX=-$(echo $TAG | cut -d - -f 2)" >> $GITHUB_ENV
          echo "PRE_RELEASE=true" >> $GITHUB_ENV

      - name: Calculate build counter/number for version code by number of tags for this version
        run: echo "VERSION_BUILD_NUMBER=$(git tag | grep $VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH | wc -l)" >> $GITHUB_ENV

      - name: Log info
        run: echo "Version is $VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$VERSION_SUFFIX - build number $VERSION_BUILD_NUMBER"

      - name: Verify that tag major.minor.patch from tag matches what is in gradle.properties
        run: |
          ./gradlew verifyVersionMatchesGradleProperties \
          -Paws_accessid=${{secrets.AWS_ACCESS_KEY_ID}} \
          -Paws_accesskey=${{secrets.AWS_SECRET_ACCESS_KEY}} \
          -Ptag_version_major=${{env.VERSION_MAJOR}} \
          -Ptag_version_minor=${{env.VERSION_MINOR}} \
          -Ptag_version_patch=${{env.VERSION_PATCH}} \

      - name: Assemble apk
        run: |
          ./gradlew assembleRelease assembleUnsigned \
          -Paws_accessid=${{secrets.AWS_ACCESS_KEY_ID}} \
          -Paws_accesskey=${{secrets.AWS_SECRET_ACCESS_KEY}} \
          -Pversion_major=${{env.VERSION_MAJOR}} \
          -Pversion_minor=${{env.VERSION_MINOR}} \
          -Pversion_patch=${{env.VERSION_PATCH}} \
          -Pversion_suffix=${{env.VERSION_SUFFIX}} \
          -Pversion_build_counter=${{env.VERSION_BUILD_NUMBER}} \

      - name: Write apk file locations to env variables
        id: apk-file-path
        run: |
          ./gradlew ${{env.APP_MODULE}}:writeApkFilePathForRelease ${{env.APP_MODULE}}:writeApkFilePathForUnsigned \
          -Paws_accessid=${{secrets.AWS_ACCESS_KEY_ID}} \
          -Paws_accesskey=${{secrets.AWS_SECRET_ACCESS_KEY}} \
          -Pversion_major=${{env.VERSION_MAJOR}} \
          -Pversion_minor=${{env.VERSION_MINOR}} \
          -Pversion_patch=${{env.VERSION_PATCH}} \
          -Pversion_suffix=${{env.VERSION_SUFFIX}} \
          -Pversion_build_counter=${{env.VERSION_BUILD_NUMBER}} \

      - name: Create github release and upload apks
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          name: Version ${{env.TAG}}
          body: See [CHANGELOG](https://github.com/${{github.repository}}/blob/${{env.TAG}}/CHANGELOG.md) for release notes.
          prerelease: ${{env.PRE_RELEASE}}
          files: |
            ${{ steps.apk-file-path.outputs.apk_path_release }}
            ${{ steps.apk-file-path.outputs.apk_path_unsigned }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment app version patch and suffix if final version was released
        if: contains(env.TAG, '-') != true
        run: |
          git checkout -- .
          echo "NEW_VERSION_PATCH=$($VERSION_PATCH + 1)" >> $GITHUB_ENV
          ./gradlew updateGradlePropertiesVersion \
          -Pnew_version_patch=${{env.NEW_VERSION_PATCH}} \
          -Pnew_version_suffix=-SNAPSHOT \
          -Pnew_build_counter=1 \
          -Paws_accessid=${{secrets.AWS_ACCESS_KEY_ID}} \
          -Paws_accesskey=${{secrets.AWS_SECRET_ACCESS_KEY}} \
      
      - name: Create Pull Request to prepare for next release
        if: contains(env.TAG, '-') != true
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Prepare for next release
          title: Prepare for next release
          body: Prepare for next release
          branch: feature/prepare-for-next-release-from-${{env.TAG}}
          base: main
          delete-branch: true
        
        # TODO should we delete all RC tags here once the final release is published?
        
      - name: Slack Notification
        uses: Aevi-UK/action-slack-notify@master
        env:
          SLACK_CHANNEL: sdk-releases
          SLACK_COLOR: '#CC0033'
          SLACK_PRETEXT: New ${{env.APP_NAME}} Release
          VERSION_NAME: ${{env.TAG}}
          VARIANTS: release, unsigned
          CHANGELOG_URL: https://github.com/${{github.repository}}/blob/${{env.TAG}}/CHANGELOG.md
          RELEASE_URL: ${{ steps.create-release.outputs.url }}
          SLACK_FOOTER: ${{ env.NOTIFICATION_FOOTER }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK_RELEASES }}        
